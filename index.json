{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | SerialBox API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | SerialBox API Reference",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes Registration Registration extension methods"
  },
  "api/Microsoft.Extensions.DependencyInjection.Registration.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.Registration.html",
    "title": "Class Registration | SerialBox API Reference",
    "keywords": "Class Registration Registration extension methods Inheritance object Registration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: SerialBox.dll Syntax public static class Registration Methods | Improve this Doc View Source RegisterSerialBox(ICanisterConfiguration?) Registers the library with the bootstrapper. Declaration public static ICanisterConfiguration? RegisterSerialBox(this ICanisterConfiguration? bootstrapper) Parameters Type Name Description ICanisterConfiguration bootstrapper The bootstrapper. Returns Type Description ICanisterConfiguration The bootstrapper"
  },
  "api/SerialBox.BaseClasses.html": {
    "href": "api/SerialBox.BaseClasses.html",
    "title": "Namespace SerialBox.BaseClasses | SerialBox API Reference",
    "keywords": "Namespace SerialBox.BaseClasses Classes SerializerBase<T> Serializer base class"
  },
  "api/SerialBox.BaseClasses.SerializerBase-1.html": {
    "href": "api/SerialBox.BaseClasses.SerializerBase-1.html",
    "title": "Class SerializerBase<T> | SerialBox API Reference",
    "keywords": "Class SerializerBase<T> Serializer base class Inheritance object SerializerBase<T> JSONSerializer XMLSerializer Implements ISerializer<T> ISerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SerialBox.BaseClasses Assembly: SerialBox.dll Syntax public abstract class SerializerBase<T> : ISerializer<T>, ISerializer Type Parameters Name Description T Serialized data type Properties | Improve this Doc View Source ContentType Content type (MIME type) Declaration public abstract string ContentType { get; } Property Value Type Description string | Improve this Doc View Source FileType Common file type (extension) Declaration public abstract string FileType { get; } Property Value Type Description string | Improve this Doc View Source Name Name of the serializer Declaration public abstract string Name { get; } Property Value Type Description string | Improve this Doc View Source ReturnType Return type Declaration public Type ReturnType { get; } Property Value Type Description Type Methods | Improve this Doc View Source Deserialize(Type, T) Deserializes the data Declaration public abstract object? Deserialize(Type objectType, T data) Parameters Type Name Description Type objectType Object type T data Data to deserialize Returns Type Description object The deserialized data | Improve this Doc View Source Serialize(Type, object) Serializes the object Declaration public abstract T Serialize(Type objectType, object data) Parameters Type Name Description Type objectType Object type object data Data to serialize Returns Type Description T The serialized data Implements ISerializer<T> ISerializer"
  },
  "api/SerialBox.Default.html": {
    "href": "api/SerialBox.Default.html",
    "title": "Namespace SerialBox.Default | SerialBox API Reference",
    "keywords": "Namespace SerialBox.Default Classes JSONSerializer JSON Serializer XMLSerializer XML serializer"
  },
  "api/SerialBox.Default.JSONSerializer.html": {
    "href": "api/SerialBox.Default.JSONSerializer.html",
    "title": "Class JSONSerializer | SerialBox API Reference",
    "keywords": "Class JSONSerializer JSON Serializer Inheritance object SerializerBase<string> JSONSerializer Implements ISerializer<string> ISerializer Inherited Members SerializerBase<string>.ReturnType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SerialBox.Default Assembly: SerialBox.dll Syntax public class JSONSerializer : SerializerBase<string>, ISerializer<string>, ISerializer Properties | Improve this Doc View Source ContentType Content type (MIME type) Declaration public override string ContentType { get; } Property Value Type Description string Overrides SerializerBase<string>.ContentType See Also SerializerBase<T> | Improve this Doc View Source FileType File type Declaration public override string FileType { get; } Property Value Type Description string Overrides SerializerBase<string>.FileType See Also SerializerBase<T> | Improve this Doc View Source Name Name Declaration public override string Name { get; } Property Value Type Description string Overrides SerializerBase<string>.Name See Also SerializerBase<T> Methods | Improve this Doc View Source Deserialize(Type, string) Deserializes the data Declaration public override object? Deserialize(Type objectType, string data) Parameters Type Name Description Type objectType Object type string data Data to deserialize Returns Type Description object The deserialized data Overrides SerializerBase<string>.Deserialize(Type, string) See Also SerializerBase<T> | Improve this Doc View Source Serialize(Type, object) Serializes the object Declaration public override string Serialize(Type objectType, object data) Parameters Type Name Description Type objectType Object type object data Data to serialize Returns Type Description string The serialized data Overrides SerializerBase<string>.Serialize(Type, object) See Also SerializerBase<T> Implements ISerializer<T> ISerializer See Also SerializerBase<T>"
  },
  "api/SerialBox.Default.XMLSerializer.html": {
    "href": "api/SerialBox.Default.XMLSerializer.html",
    "title": "Class XMLSerializer | SerialBox API Reference",
    "keywords": "Class XMLSerializer XML serializer Inheritance object SerializerBase<string> XMLSerializer Implements ISerializer<string> ISerializer Inherited Members SerializerBase<string>.ReturnType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SerialBox.Default Assembly: SerialBox.dll Syntax public class XMLSerializer : SerializerBase<string>, ISerializer<string>, ISerializer Constructors | Improve this Doc View Source XMLSerializer() Initializes a new instance of the XMLSerializer class. Declaration public XMLSerializer() Properties | Improve this Doc View Source ContentType Content type (MIME type) Declaration public override string ContentType { get; } Property Value Type Description string Overrides SerializerBase<string>.ContentType | Improve this Doc View Source FileType File type Declaration public override string FileType { get; } Property Value Type Description string Overrides SerializerBase<string>.FileType | Improve this Doc View Source Name Name Declaration public override string Name { get; } Property Value Type Description string Overrides SerializerBase<string>.Name Methods | Improve this Doc View Source Deserialize(Type, string) Deserializes the data Declaration public override object? Deserialize(Type objectType, string data) Parameters Type Name Description Type objectType Object type string data Data to deserialize Returns Type Description object The deserialized data Overrides SerializerBase<string>.Deserialize(Type, string) | Improve this Doc View Source Serialize(Type, object) Serializes the object Declaration public override string Serialize(Type objectType, object data) Parameters Type Name Description Type objectType Object type object data Data to serialize Returns Type Description string The serialized data Overrides SerializerBase<string>.Serialize(Type, object) Implements ISerializer<T> ISerializer"
  },
  "api/SerialBox.Enums.html": {
    "href": "api/SerialBox.Enums.html",
    "title": "Namespace SerialBox.Enums | SerialBox API Reference",
    "keywords": "Namespace SerialBox.Enums Classes SerializationType Defines the serialization types in an enum like static class"
  },
  "api/SerialBox.Enums.SerializationType.html": {
    "href": "api/SerialBox.Enums.SerializationType.html",
    "title": "Class SerializationType | SerialBox API Reference",
    "keywords": "Class SerializationType Defines the serialization types in an enum like static class Inheritance object SerializationType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SerialBox.Enums Assembly: SerialBox.dll Syntax public class SerializationType Constructors | Improve this Doc View Source SerializationType(string) Initializes a new instance of the SerializationType class. Declaration protected SerializationType(string name) Parameters Type Name Description string name The name. Properties | Improve this Doc View Source JSON Gets the json serialization type. Declaration public static SerializationType JSON { get; } Property Value Type Description SerializationType The json serialization type. | Improve this Doc View Source XML Gets the XML serialization type. Declaration public static SerializationType XML { get; } Property Value Type Description SerializationType The XML serialization type. Methods | Improve this Doc View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() Operators | Improve this Doc View Source explicit operator SerializationType(string) Performs an explicit conversion from string to SerializationType. Declaration public static explicit operator SerializationType(string serializationType) Parameters Type Name Description string serializationType Type of the serialization. Returns Type Description SerializationType The result of the conversion. | Improve this Doc View Source implicit operator string(SerializationType) Performs an implicit conversion from SerializationType to string. Declaration public static implicit operator string(SerializationType serializationType) Parameters Type Name Description SerializationType serializationType Type of the serialization. Returns Type Description string The result of the conversion."
  },
  "api/SerialBox.html": {
    "href": "api/SerialBox.html",
    "title": "Namespace SerialBox | SerialBox API Reference",
    "keywords": "Namespace SerialBox Classes SerialBox SerialBox's main class"
  },
  "api/SerialBox.Interfaces.html": {
    "href": "api/SerialBox.Interfaces.html",
    "title": "Namespace SerialBox.Interfaces | SerialBox API Reference",
    "keywords": "Namespace SerialBox.Interfaces Interfaces ISerializer Serializer interface ISerializer<T> Serializer interface"
  },
  "api/SerialBox.Interfaces.ISerializer-1.html": {
    "href": "api/SerialBox.Interfaces.ISerializer-1.html",
    "title": "Interface ISerializer<T> | SerialBox API Reference",
    "keywords": "Interface ISerializer<T> Serializer interface Inherited Members ISerializer.ContentType ISerializer.FileType ISerializer.Name ISerializer.ReturnType Namespace: SerialBox.Interfaces Assembly: SerialBox.dll Syntax public interface ISerializer<T> : ISerializer Type Parameters Name Description T Object type returned Methods | Improve this Doc View Source Deserialize(Type, T) Deserializes the data Declaration object? Deserialize(Type objectType, T data) Parameters Type Name Description Type objectType Object type T data Data to deserialize Returns Type Description object The deserialized data | Improve this Doc View Source Serialize(Type, object) Serializes the object Declaration T Serialize(Type objectType, object data) Parameters Type Name Description Type objectType Object type object data Data to serialize Returns Type Description T The serialized data"
  },
  "api/SerialBox.Interfaces.ISerializer.html": {
    "href": "api/SerialBox.Interfaces.ISerializer.html",
    "title": "Interface ISerializer | SerialBox API Reference",
    "keywords": "Interface ISerializer Serializer interface Namespace: SerialBox.Interfaces Assembly: SerialBox.dll Syntax public interface ISerializer Properties | Improve this Doc View Source ContentType Content type associated with this serializer (MIME type) Declaration string ContentType { get; } Property Value Type Description string | Improve this Doc View Source FileType File ending associated with the serializer Declaration string FileType { get; } Property Value Type Description string | Improve this Doc View Source Name Name of the serializer Declaration string Name { get; } Property Value Type Description string | Improve this Doc View Source ReturnType Return type for the serialized data Declaration Type ReturnType { get; } Property Value Type Description Type"
  },
  "api/SerialBox.Module.html": {
    "href": "api/SerialBox.Module.html",
    "title": "Namespace SerialBox.Module | SerialBox API Reference",
    "keywords": "Namespace SerialBox.Module Classes SerialBoxModule SerialBox module"
  },
  "api/SerialBox.Module.SerialBoxModule.html": {
    "href": "api/SerialBox.Module.SerialBoxModule.html",
    "title": "Class SerialBoxModule | SerialBox API Reference",
    "keywords": "Class SerialBoxModule SerialBox module Inheritance object SerialBoxModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SerialBox.Module Assembly: SerialBox.dll Syntax public class SerialBoxModule : IModule Properties | Improve this Doc View Source Order Order to run it in Declaration public int Order { get; } Property Value Type Description int See Also IModule Methods | Improve this Doc View Source Load(IServiceCollection) Loads the module Declaration public void Load(IServiceCollection bootstrapper) Parameters Type Name Description IServiceCollection bootstrapper Bootstrapper to register with See Also IModule Implements IModule See Also IModule"
  },
  "api/SerialBox.SerialBox.html": {
    "href": "api/SerialBox.SerialBox.html",
    "title": "Class SerialBox | SerialBox API Reference",
    "keywords": "Class SerialBox SerialBox's main class Inheritance object SerialBox Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SerialBox Assembly: SerialBox.dll Syntax public class SerialBox Constructors | Improve this Doc View Source SerialBox(IEnumerable<ISerializer>) Constructor Declaration public SerialBox(IEnumerable<ISerializer> serializers) Parameters Type Name Description IEnumerable<ISerializer> serializers The serializers. Properties | Improve this Doc View Source Serializers Serializers Declaration protected IDictionary<string, ISerializer> Serializers { get; } Property Value Type Description IDictionary<string, ISerializer> Methods | Improve this Doc View Source CanSerialize(string) Determines if the system can serialize/deserialize the content type Declaration public bool CanSerialize(string contentType) Parameters Type Name Description string contentType Content type Returns Type Description bool True if it can, false otherwise | Improve this Doc View Source Deserialize<T>(T, Type, SerializationType?) Deserializes the data to an object Declaration public object? Deserialize<T>(T data, Type objectType, SerializationType? contentType = null) Parameters Type Name Description T data Data to deserialize Type objectType Object type requested SerializationType contentType Content type (MIME type) Returns Type Description object The deserialized object Type Parameters Name Description T Type of the data | Improve this Doc View Source Deserialize<T, R>(T, SerializationType?) Deserializes the data to an object Declaration public R Deserialize<T, R>(T data, SerializationType? contentType = null) Parameters Type Name Description T data Data to deserialize SerializationType contentType Content type (MIME type) Returns Type Description R The deserialized object Type Parameters Name Description T Data type R Return object type | Improve this Doc View Source FileTypeToContentType(string) File type to content type Declaration public string FileTypeToContentType(string fileType) Parameters Type Name Description string fileType File type Returns Type Description string Content type | Improve this Doc View Source Serialize<T>(object, Type?, SerializationType?) Serializes the object based on the content type specified Declaration public T Serialize<T>(object data, Type? objectType, SerializationType? contentType = null) Parameters Type Name Description object data Object to serialize Type objectType Object type SerializationType contentType Content type (MIME type) Returns Type Description T The serialized object as a string Type Parameters Name Description T Return type | Improve this Doc View Source Serialize<T, R>(T, SerializationType?) Serializes the object based on the content type specified Declaration public R Serialize<T, R>(T data, SerializationType? contentType = null) Parameters Type Name Description T data Object to serialize SerializationType contentType Content type (MIME type) Returns Type Description R The serialized object as a string Type Parameters Name Description T Object type R Return type | Improve this Doc View Source ToString() Outputs information about the serializers the system is using Declaration public override string ToString() Returns Type Description string String version of the object Overrides object.ToString()"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | SerialBox API Reference",
    "keywords": "Code using SerialBox.Enums; namespace SerialBox.Example { /// <summary> /// Example class /// </summary> public class Temp { /// <summary> /// Example property /// </summary> /// <value> /// Example value /// </value> public int A { get; set; } } /// <summary> /// Example program /// </summary> internal class Program { /// <summary> /// Defines the entry point of the application. /// </summary> /// <param name=\"args\">The arguments.</param> private static void Main(string[] args) { // Object to serialize var TestObj = new Temp() { A = 100 }; // Serialize to JSON var Value = TestObj.Serialize<string, Temp>(SerializationType.JSON); // Print the value of Value Console.WriteLine(Value); // Deserialize from JSON var TestObj2 = Value.Deserialize<Temp, string>(SerializationType.JSON); // Print the value of TestObj2.A Console.WriteLine(TestObj2.A); } } } Output {\"A\":100} 100"
  },
  "index.html": {
    "href": "index.html",
    "title": "SerialBox | SerialBox API Reference",
    "keywords": "SerialBox SerialBox is a library designed to simplify serialization in .Net. By default it supports XML and JSON but can be expanded upon to support other serialization targets as well. Basic Usage uses a library called Canister for registering itself in your ServiceCollection: servicecollection.AddCanisterModules(); This line is required prior to using the extension methods for the first time. Once Canister is set up, you can call the extension methods provided: [DataContract] public class Temp { [DataMember(Name = \"A\", Order = 1)] public int A { get; set; } } ... var TestObj = new Temp() { A = 100 }; string Value = TestObj.Serialize<string, Temp>(); Temp TestObj2 = Value.Deserialize<Temp, string>(); The Serialize function takes the serialization type as a parameter. If one is not passed in, it defaults to JSON. This parameter can either be the MIME type for the serialization type as a string or it can be a SerializationType object. The Deserialize function acts in the same manner. Adding Serialization Types The system comes with JSON and XML serialization, however you may wish to add other targets such as binary. In order to do this all that you need to do is create a class that inherits from ISerializer : public class MySerializer : ISerializer<byte[]> { public string ContentType => \"application/octet-stream\"; public string FileType => \".blob\"; public string Name => \"Binary\"; public object Deserialize(Type objectType, byte[] data) { ... } public byte[] Serialize(Type objectType, object data) { ... } } After the class is created, the system will automatically pick it up and use it. Overriding Serialization Types By default the system uses the built in JSON and XML providers in .Net. However it is possible to override these by simply creating a class that inherits from ISerializer and setting the correct ContentType to match the one that you wish to override. For instance to override the JSON provider with your own you would do the following: public class MySerializer : ISerializer<string> { public string ContentType => \"application/json\"; public string FileType => \".json\"; public string Name => \"JSON\"; public object Deserialize(Type objectType, string data) { ... } public string Serialize(Type objectType, object data) { ... } } After the class is created, the system will automatically pick it up and use it. Installation The library is available via Nuget with the package name \"SerialBox\". To install it run the following command in the Package Manager Console: Install-Package SerialBox Build Process In order to build the library you will require the following as a minimum: Visual Studio 2022 Other than that, just clone the project and you should be able to load the solution and build without too much effort."
  }
}