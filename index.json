{
  "api/SerialBox.BaseClasses.SerializerBase-1.html": {
    "href": "api/SerialBox.BaseClasses.SerializerBase-1.html",
    "title": "Class SerializerBase<T> | SerialBox API Reference",
    "keywords": "Class SerializerBase<T> Namespace SerialBox.BaseClasses Assembly SerialBox.dll Serializer base class public abstract class SerializerBase<T> : ISerializer<T>, ISerializer Type Parameters T Serialized data type Inheritance object SerializerBase<T> Implements ISerializer<T> ISerializer Derived JSONSerializer XMLSerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ContentType Content type (MIME type) public abstract string ContentType { get; } Property Value string FileType Common file type (extension) public abstract string FileType { get; } Property Value string Name Name of the serializer public abstract string Name { get; } Property Value string ReturnType Return type public Type ReturnType { get; } Property Value Type Methods Deserialize(Type, T) Deserializes the data public abstract object? Deserialize(Type objectType, T data) Parameters objectType Type Object type data T Data to deserialize Returns object The deserialized data Serialize(Type, object) Serializes the object public abstract T? Serialize(Type objectType, object data) Parameters objectType Type Object type data object Data to serialize Returns T The serialized data"
  },
  "api/SerialBox.BaseClasses.html": {
    "href": "api/SerialBox.BaseClasses.html",
    "title": "Namespace SerialBox.BaseClasses | SerialBox API Reference",
    "keywords": "Namespace SerialBox.BaseClasses Classes SerializerBase<T> Serializer base class"
  },
  "api/SerialBox.Default.JSONSerializer.html": {
    "href": "api/SerialBox.Default.JSONSerializer.html",
    "title": "Class JSONSerializer | SerialBox API Reference",
    "keywords": "Class JSONSerializer Namespace SerialBox.Default Assembly SerialBox.dll JSON Serializer public class JSONSerializer : SerializerBase<string>, ISerializer<string>, ISerializer Inheritance object SerializerBase<string> JSONSerializer Implements ISerializer<string> ISerializer Inherited Members SerializerBase<string>.ReturnType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ContentType Content type (MIME type) public override string ContentType { get; } Property Value string FileType File type public override string FileType { get; } Property Value string Name Name public override string Name { get; } Property Value string Methods Deserialize(Type, string) Deserializes the data public override object? Deserialize(Type objectType, string data) Parameters objectType Type Object type data string Data to deserialize Returns object The deserialized data Serialize(Type, object) Serializes the object public override string? Serialize(Type objectType, object data) Parameters objectType Type Object type data object Data to serialize Returns string The serialized data See Also SerializerBase<T>"
  },
  "api/SerialBox.Default.XMLSerializer.html": {
    "href": "api/SerialBox.Default.XMLSerializer.html",
    "title": "Class XMLSerializer | SerialBox API Reference",
    "keywords": "Class XMLSerializer Namespace SerialBox.Default Assembly SerialBox.dll XML serializer public class XMLSerializer : SerializerBase<string>, ISerializer<string>, ISerializer Inheritance object SerializerBase<string> XMLSerializer Implements ISerializer<string> ISerializer Inherited Members SerializerBase<string>.ReturnType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors XMLSerializer() Initializes a new instance of the XMLSerializer class. public XMLSerializer() Properties ContentType Content type (MIME type) public override string ContentType { get; } Property Value string FileType File type public override string FileType { get; } Property Value string Name Name public override string Name { get; } Property Value string Methods Deserialize(Type, string) Deserializes the data public override object? Deserialize(Type objectType, string data) Parameters objectType Type Object type data string Data to deserialize Returns object The deserialized data Serialize(Type, object) Serializes the object public override string? Serialize(Type objectType, object data) Parameters objectType Type Object type data object Data to serialize Returns string The serialized data"
  },
  "api/SerialBox.Default.html": {
    "href": "api/SerialBox.Default.html",
    "title": "Namespace SerialBox.Default | SerialBox API Reference",
    "keywords": "Namespace SerialBox.Default Classes JSONSerializer JSON Serializer XMLSerializer XML serializer"
  },
  "api/SerialBox.Enums.SerializationType.html": {
    "href": "api/SerialBox.Enums.SerializationType.html",
    "title": "Class SerializationType | SerialBox API Reference",
    "keywords": "Class SerializationType Namespace SerialBox.Enums Assembly SerialBox.dll Defines the serialization types in an enum like static class public class SerializationType Inheritance object SerializationType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SerializationType(string) Initializes a new instance of the SerializationType class. protected SerializationType(string name) Parameters name string The name. Properties JSON Gets the json serialization type. public static SerializationType JSON { get; } Property Value SerializationType The json serialization type. XML Gets the XML serialization type. public static SerializationType XML { get; } Property Value SerializationType The XML serialization type. Methods ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. Operators explicit operator SerializationType(string) Performs an explicit conversion from string to SerializationType. public static explicit operator SerializationType(string serializationType) Parameters serializationType string Type of the serialization. Returns SerializationType The result of the conversion. implicit operator string(SerializationType) Performs an implicit conversion from SerializationType to string. public static implicit operator string(SerializationType serializationType) Parameters serializationType SerializationType Type of the serialization. Returns string The result of the conversion."
  },
  "api/SerialBox.Enums.html": {
    "href": "api/SerialBox.Enums.html",
    "title": "Namespace SerialBox.Enums | SerialBox API Reference",
    "keywords": "Namespace SerialBox.Enums Classes SerializationType Defines the serialization types in an enum like static class"
  },
  "api/SerialBox.Interfaces.ISerializer-1.html": {
    "href": "api/SerialBox.Interfaces.ISerializer-1.html",
    "title": "Interface ISerializer<T> | SerialBox API Reference",
    "keywords": "Interface ISerializer<T> Namespace SerialBox.Interfaces Assembly SerialBox.dll Serializer interface public interface ISerializer<T> : ISerializer Type Parameters T Object type returned Inherited Members ISerializer.ContentType ISerializer.FileType ISerializer.Name ISerializer.ReturnType Methods Deserialize(Type, T) Deserializes the data object? Deserialize(Type objectType, T data) Parameters objectType Type Object type data T Data to deserialize Returns object The deserialized data Serialize(Type, object) Serializes the object T? Serialize(Type objectType, object data) Parameters objectType Type Object type data object Data to serialize Returns T The serialized data"
  },
  "api/SerialBox.Interfaces.ISerializer.html": {
    "href": "api/SerialBox.Interfaces.ISerializer.html",
    "title": "Interface ISerializer | SerialBox API Reference",
    "keywords": "Interface ISerializer Namespace SerialBox.Interfaces Assembly SerialBox.dll Serializer interface public interface ISerializer Properties ContentType Content type associated with this serializer (MIME type) string ContentType { get; } Property Value string FileType File ending associated with the serializer string FileType { get; } Property Value string Name Name of the serializer string Name { get; } Property Value string ReturnType Return type for the serialized data Type ReturnType { get; } Property Value Type"
  },
  "api/SerialBox.Interfaces.html": {
    "href": "api/SerialBox.Interfaces.html",
    "title": "Namespace SerialBox.Interfaces | SerialBox API Reference",
    "keywords": "Namespace SerialBox.Interfaces Interfaces ISerializer Serializer interface ISerializer<T> Serializer interface"
  },
  "api/SerialBox.Module.SerialBoxModule.html": {
    "href": "api/SerialBox.Module.SerialBoxModule.html",
    "title": "Class SerialBoxModule | SerialBox API Reference",
    "keywords": "Class SerialBoxModule Namespace SerialBox.Module Assembly SerialBox.dll SerialBox module public class SerialBoxModule : IModule Inheritance object SerialBoxModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Order to run it in public int Order { get; } Property Value int Methods Load(IServiceCollection) Loads the module public void Load(IServiceCollection bootstrapper) Parameters bootstrapper IServiceCollection Bootstrapper to register with See Also IModule"
  },
  "api/SerialBox.Module.html": {
    "href": "api/SerialBox.Module.html",
    "title": "Namespace SerialBox.Module | SerialBox API Reference",
    "keywords": "Namespace SerialBox.Module Classes SerialBoxModule SerialBox module"
  },
  "api/SerialBox.Registration.Registration.html": {
    "href": "api/SerialBox.Registration.Registration.html",
    "title": "Class Registration | SerialBox API Reference",
    "keywords": "Class Registration Namespace SerialBox.Registration Assembly SerialBox.dll Registration extension methods public static class Registration Inheritance object Registration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterSerialBox(ICanisterConfiguration?) Registers the library with the bootstrapper. public static ICanisterConfiguration? RegisterSerialBox(this ICanisterConfiguration? bootstrapper) Parameters bootstrapper ICanisterConfiguration The bootstrapper. Returns ICanisterConfiguration The bootstrapper RegisterSerialBox(IServiceCollection?) Registers the SerialBox services with the specified IServiceCollection. public static IServiceCollection? RegisterSerialBox(this IServiceCollection? services) Parameters services IServiceCollection The IServiceCollection to add the services to. Returns IServiceCollection The IServiceCollection with the registered services."
  },
  "api/SerialBox.Registration.html": {
    "href": "api/SerialBox.Registration.html",
    "title": "Namespace SerialBox.Registration | SerialBox API Reference",
    "keywords": "Namespace SerialBox.Registration Classes Registration Registration extension methods"
  },
  "api/SerialBox.SerialBox.html": {
    "href": "api/SerialBox.SerialBox.html",
    "title": "Class SerialBox | SerialBox API Reference",
    "keywords": "Class SerialBox Namespace SerialBox Assembly SerialBox.dll SerialBox's main class public class SerialBox Inheritance object SerialBox Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SerialBox(IEnumerable<ISerializer>) Constructor public SerialBox(IEnumerable<ISerializer> serializers) Parameters serializers IEnumerable<ISerializer> The serializers. Properties Serializers Serializers protected IDictionary<string, ISerializer> Serializers { get; } Property Value IDictionary<string, ISerializer> Methods CanSerialize(string) Determines if the system can serialize/deserialize the content type public bool CanSerialize(string contentType) Parameters contentType string Content type Returns bool True if it can, false otherwise Deserialize<T>(T, Type, SerializationType?) Deserializes the data to an object public object? Deserialize<T>(T data, Type objectType, SerializationType? contentType = null) Parameters data T Data to deserialize objectType Type Object type requested contentType SerializationType Content type (MIME type) Returns object The deserialized object Type Parameters T Type of the data Deserialize<T, TR>(T, SerializationType?) Deserializes the data to an object public TR? Deserialize<T, TR>(T data, SerializationType? contentType = null) Parameters data T Data to deserialize contentType SerializationType Content type (MIME type) Returns TR The deserialized object Type Parameters T Data type TR Return object type FileTypeToContentType(string) File type to content type public string FileTypeToContentType(string fileType) Parameters fileType string File type Returns string Content type Serialize<T>(object, Type?, SerializationType?) Serializes the object based on the content type specified public T? Serialize<T>(object data, Type? objectType, SerializationType? contentType = null) Parameters data object Object to serialize objectType Type Object type contentType SerializationType Content type (MIME type) Returns T The serialized object as a string Type Parameters T Return type Serialize<T, TR>(T, SerializationType?) Serializes the object based on the content type specified public TR? Serialize<T, TR>(T data, SerializationType? contentType = null) Parameters data T Object to serialize contentType SerializationType Content type (MIME type) Returns TR The serialized object as a string Type Parameters T Object type TR Return type ToString() Outputs information about the serializers the system is using public override string ToString() Returns string String version of the object"
  },
  "api/SerialBox.html": {
    "href": "api/SerialBox.html",
    "title": "Namespace SerialBox | SerialBox API Reference",
    "keywords": "Namespace SerialBox Classes SerialBox SerialBox's main class"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | SerialBox API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | SerialBox API Reference",
    "keywords": "Code using SerialBox.Enums; namespace SerialBox.Example { /// <summary> /// Example class /// </summary> public class Temp { /// <summary> /// Example property /// </summary> /// <value> /// Example value /// </value> public int A { get; set; } } /// <summary> /// Example program /// </summary> internal class Program { /// <summary> /// Defines the entry point of the application. /// </summary> /// <param name=\"args\">The arguments.</param> private static void Main(string[] args) { // Object to serialize var TestObj = new Temp() { A = 100 }; // Serialize to JSON var Value = TestObj.Serialize<string, Temp>(SerializationType.JSON); // Print the value of Value Console.WriteLine(Value); // Deserialize from JSON var TestObj2 = Value.Deserialize<Temp, string>(SerializationType.JSON); // Print the value of TestObj2.A Console.WriteLine(TestObj2.A); } } } Output {\"A\":100} 100"
  },
  "index.html": {
    "href": "index.html",
    "title": "SerialBox | SerialBox API Reference",
    "keywords": "SerialBox SerialBox is a library designed to simplify serialization in .Net. By default it supports XML and JSON but can be expanded upon to support other serialization targets as well. Basic Usage The library can be initialized by registering it with your IoC container during startup. Example code: ServiceProvider? ServiceProvider = new ServiceCollection().RegisterAspectus()?.BuildServiceProvider(); or ServiceProvider? ServiceProvider = new ServiceCollection().AddCanisterModules()?.BuildServiceProvider(); As the library supports Canister Modules. This line is required prior to using the extension methods for the first time. Once it is set up, you can call the extension methods provided: [DataContract] public class Temp { [DataMember(Name = \"A\", Order = 1)] public int A { get; set; } } ... var TestObj = new Temp() { A = 100 }; string Value = TestObj.Serialize<string, Temp>(); Temp TestObj2 = Value.Deserialize<Temp, string>(); The Serialize function takes the serialization type as a parameter. If one is not passed in, it defaults to JSON. This parameter can either be the MIME type for the serialization type as a string or it can be a SerializationType object. The Deserialize function acts in the same manner. Adding Serialization Types The system comes with JSON and XML serialization, however you may wish to add other targets such as binary. In order to do this all that you need to do is create a class that inherits from ISerializer : public class MySerializer : ISerializer<byte[]> { public string ContentType => \"application/octet-stream\"; public string FileType => \".blob\"; public string Name => \"Binary\"; public object Deserialize(Type objectType, byte[] data) { ... } public byte[] Serialize(Type objectType, object data) { ... } } After the class is created, the system will automatically pick it up and use it. Overriding Serialization Types By default the system uses the built in JSON and XML providers in .Net. However it is possible to override these by simply creating a class that inherits from ISerializer and setting the correct ContentType to match the one that you wish to override. For instance to override the JSON provider with your own you would do the following: public class MySerializer : ISerializer<string> { public string ContentType => \"application/json\"; public string FileType => \".json\"; public string Name => \"JSON\"; public object Deserialize(Type objectType, string data) { ... } public string Serialize(Type objectType, object data) { ... } } After the class is created, the system will automatically pick it up and use it. Installation The library is available via Nuget with the package name \"SerialBox\". To install it run the following command in the Package Manager Console: Install-Package SerialBox Build Process In order to build the library you will require the following as a minimum: Visual Studio 2022 Other than that, just clone the project and you should be able to load the solution and build without too much effort."
  }
}